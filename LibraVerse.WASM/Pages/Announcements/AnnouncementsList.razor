@page "/admin/announcements"

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-6 fw-bold text-primary mb-0">
                        <i class="bi bi-megaphone me-2"></i>Announcements Management
                    </h1>
                    <p class="text-muted">Create and manage announcements for your users</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenCreateAnnouncementModal">
                    <i class="bi bi-plus-circle me-2"></i>New Announcement
                </button>
            </div>
        </div>
    </div>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-white py-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">All Announcements</h5>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" @onchange="HandleTypeChange">
                        <option value="" selected="selected">All Types</option>
                        @foreach (AnnouncementType type in Enum.GetValues(typeof(AnnouncementType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                    <select class="form-select form-select-sm" @onchange="HandleStatusChange">
                        <option value="" selected="selected">All Status</option>
                        <option value="active">Active</option>
                        <option value="upcoming">Upcoming</option>
                        <option value="expired">Expired</option>
                    </select>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (announcements == null || announcements.Items == null || announcements.Items.Count == 0)
        {
            <div class="card-body text-center py-5">
                <div class="empty-announcements-icon mb-4">
                    <i class="bi bi-megaphone text-muted"></i>
                </div>
                <h3 class="text-muted">No announcements found</h3>
                <p class="text-muted mb-4">Create your first announcement to inform users about news, events, or offers.</p>
                <button class="btn btn-primary" @onclick="OpenCreateAnnouncementModal">
                    <i class="bi bi-plus-circle me-2"></i>Create Announcement
                </button>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">Title</th>
                            <th scope="col">Type</th>
                            <th scope="col">Book</th>
                            <th scope="col">Duration</th>
                            <th scope="col">Status</th>
                            <th scope="col" class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var announcement in filteredAnnouncements)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="announcement-icon me-3 @GetAnnouncementTypeClass(announcement.Type)">
                                            <i class="bi @GetAnnouncementTypeIcon(announcement.Type)"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-0">@announcement.Title</h6>
                                            <small class="text-muted">@(announcement.Description.Length > 50 ? announcement.Description.Substring(0, 50) + "..." : announcement.Description)</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge @GetAnnouncementTypeBadgeClass(announcement.Type)">
                                        @announcement.Type
                                    </span>
                                </td>
                                <td>
                                    @if (announcement.Book != null)
                                    {
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(announcement.Book.CoverImage))
                                            {
                                                <img src="https://localhost:7115/images/@announcement.Book.CoverImage" class="announcement-book-thumbnail me-2" alt="@announcement.Book.Title">
                                            }
                                            else
                                            {
                                                <div class="announcement-book-thumbnail-placeholder me-2 d-flex align-items-center justify-content-center bg-light">
                                                    <i class="bi bi-book text-muted"></i>
                                                </div>
                                            }
                                            <span>@announcement.Book.Title</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </td>
                                <td>
                                    <div>
                                        <div>@announcement.StartDate.ToString("MMM d, yyyy")</div>
                                        <small class="text-muted">to @announcement.EndDate.ToString("MMM d, yyyy")</small>
                                    </div>
                                </td>
                                <td>
                                    @{
                                        var now = DateTime.Now;
                                        var status = now < announcement.StartDate ? "Upcoming" : 
                                                    now > announcement.EndDate ? "Expired" : "Active";
                                        var statusClass = status == "Active" ? "bg-success" : 
                                                        status == "Upcoming" ? "bg-info" : "bg-danger";
                                    }
                                    <span class="badge @statusClass">@status</span>
                                </td>
                                <td class="text-end">
                                    <div class="d-flex justify-content-end gap-2">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenEditAnnouncementModal(announcement)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteAnnouncement(announcement)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between align-items-center p-3 border-top">
                <div>
                    <span class="text-muted">Showing @(((announcements.Page - 1) * announcements.PageSize) + 1) to @Math.Min(announcements.Page * announcements.PageSize, announcements.TotalCount) of @announcements.TotalCount announcements</span>
                </div>
                <nav aria-label="Page navigation">
                    <ul class="pagination mb-0">
                        <li class="page-item @(announcements.Page <= 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(announcements.Page - 1)" disabled="@(announcements.Page <= 1)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                        </li>
                        @for (int i = Math.Max(1, announcements.Page - 2); i <= Math.Min(Math.Ceiling((double)announcements.TotalCount / announcements.PageSize), announcements.Page + 2); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(announcements.Page == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        <li class="page-item @(announcements.Page >= Math.Ceiling((double)announcements.TotalCount / announcements.PageSize) ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(announcements.Page + 1)" disabled="@(announcements.Page >= Math.Ceiling((double)announcements.TotalCount / announcements.PageSize))">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    </div>
</div>

<!-- Announcement Form Modal -->
<AnnouncementFormModal @ref="announcementFormModal" OnSave="LoadAnnouncements" />

<style>
    .empty-announcements-icon {
        font-size: 5rem;
        color: #dee2e6;
    }

    .announcement-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

    .announcement-icon.bg-info {
        background-color: #0dcaf0;
    }

    .announcement-icon.bg-warning {
        background-color: #ffc107;
    }

    .announcement-icon.bg-success {
        background-color: #198754;
    }

    .announcement-icon.bg-danger {
        background-color: #dc3545;
    }

    .announcement-icon.bg-primary {
        background-color: #0d6efd;
    }

    .announcement-book-thumbnail {
        width: 30px;
        height: 40px;
        object-fit: cover;
        border-radius: 4px;
    }

    .announcement-book-thumbnail-placeholder {
        width: 30px;
        height: 40px;
        border-radius: 4px;
    }
</style>